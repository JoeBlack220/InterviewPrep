01 knapsack
state transition function:
dp[i][j] = max(dp[i - 1][j], dp[i - 1][j - w[i]] + v[i])
ans(max(dp[N][*]))
to reduce space complexity
1. use a temp array
def knapsack10(w, v):
    dp = new int[W + 1[
    for i = 1 to W:
        tmp = new int[W + 1]
        for j = w[i] to W:
            tmp[j] = max(tmp[j], dp[j - w[i]] + v[i])
        dp = tmp
     return max(dp)

2. iterator j in reverse order
Push:
def knapsack10(w, v):
    dp = new int[W + 1]
    for i = 1 to N:
        for j = W - w[i] to 0:
            dp[j + w[i]] = max(dp[j + w[i]], dp[j] + v[i])
    return max(dp)

Pull:
def knapsack10(w, v):
    dp = new int[W + 1]
    for i = 1 to N:
        for j = W to w[i]:
            dp[j] = max(dp[j - w[i]], dp[j - w[i]] + v[i])
    return max(dp)

iterate from the last to the first can guarantee that we only used the state from i - 1 iteration
in other words, we can guarantee that we don't use a state that include the current item
in reverse, if we iterate from the front to the end, we might use a state that include the current item,
so it's the solution from unbounded knapsack problem

if we initialize all the entries of the dp matrix to 0, then just return dp[v]
because here dp[v] represents the max value of items of volume less than v

if we initialize all the entries of the dp matrix to -INF, and dp[0] to 0, then we can get the maximum value of volume exactly
equals to v by dp[v]. then the maximum value the item set can get should be max(dp[i]) i from 1 to N

unbounded knapsack problem
given n times, w[i] is the weight of the i-th item and v[i] is the value of the i-th item.
given a knapsack with capacity W. Maximize the total value. each item can be used any times

solution 1: reduce to 0-1 knapsack problem (naive)
expand the item list, each item appears floor(W/w[i]) times

solution 2: reduce to 0-1 knapsack problem (smarter?)

assuming in the optimal sol, item i was used m times
m is a combination of (0, 1, 2, 4 ... 2^k)
expand the item list
(w[i], v[i]) -> {(w[i], v[i]), (2*w[i], 2*v[i]), (4*w[i], 4*v[i]), ... ,(2^k*w[i], 2^k*v[i])}, 2^k*w[i] <= W

time complexity: O(NWlogW)
space complexity: ONW)

solution 3: use each item more than once more efficiently
Iterate j in normal order, that's it

time: O(NW)
space: O(W)

def knapsackComplete(w, v)
    for i = 1 to N
        for j = w to W:
            dp[j] = max(dp[j], dp[j - w] + v)

3.bounded knapsack problem
every item has a limit on its number
f[i] the maximum value of items' total volume less or equal to i

    1. straight forward
    for(int i = 0l i < n; ++i) {
        for(int j = m; j >= v[i]; j--) {
            f[j] = max(f[j], f[j - v[i]] + w[i], f[j - 2 * v[i]] + w[i] ...);
        }
    }

    initialize f[i] to 0 : f[m]
    initialize f[0] to 9, others to -INF: max(f[i])

    2. reduce to 0-1 knapsack problem (like solution two of the last problem)

    3.
        for each item with volume v

4.mixed knapsack problems
3 kinds of items
    1.all items can be used for once
    2.all items can be used for unlimited times
    3.item i can be used for si times

5.two dimensions cost knapsack problems

6.grouping knapsack problems
