executorService   -> thread pool
completableFuture
CompletableFuture<Void> future = CompletableFuture.supplyAsync(() -> "Hello")
this way we didn't use the thread pool
might create too many threads

synchronization: concurrent access to shared data: data could be a counter
                 a critical section: a block of code that could be only safely executed by one thread
                 a lock: an object that is "held" by one thread at a time, then released

synchronized disadvantage: become sequential

every object in java has an intrinsic lock
when a thread tries to run a synchronized method, it first tries to get a lock on the object
if a thread is successful, then it owns the lock and executes the synchronized code
other threads cannot run the synchronized code because the lock is unavailable

but other threads can run the code without the synchronized key word

synchronized blocks
synchronized blocks allow for flexibility, in the case if we want our intrinsic lock to come from an object other
than the current object

class level synchronization: add static key word the the method you want which to be synchronized

wait() method:
defined in class Object
Inherited by all objects
A thread invoking wait() will suspend the thread
A thread invoking wait() must own the intrinsic lock of the object it is calling wait() from
If we are going to call this.wait() it has to be in synchronized(this) block
wait() method must be in a try-catch block that catches InterruptedExceptions
All threads that call wait() on an object are placed in a pool of waiting threads for that object

notify() method
defined in class object
inherited by all objects
execution resumes when another thread calls the notify() method of the object our first thread is waiting on
when the notify() method of an object is called, then is signaled to get ready to resume execution
after our producer releases the lock, our consumer thread gets the lock once again and resumes its execution

notifyAll() method
defined in class Object
inherited by all objects
notifies all the waiting threads
these waiting threads would then compete to see which single thread resumes execution, the rest of the threads would
once again wait


mutex v.s. semaphore
mutex is like a lock, we only allows one at a time
semaphore can allow multiple threads get in a critical area at a time

Lock
implemented by ReentrantLock
It provides all the features of synchronized keyword with additional ways to create different conditions for locking,
providing timeout for thread to wait for lock

ReadWriteLock
Implemented by ReentrantReadWriteLock
It contains a pair of associated locks, Read Lock for read-only operations and Write lock for Writing. The Read Lock
may be held simultaneously by multiple reader threads as long as there are no writer threads. The Write Lock is exclusive

it's more flexible, you can lock in one method and release the lock in other method

atomic
compare and swap(CAS)
A hardware instruction is much more lightweight than java's monitor-based-synchronization mechanism and is used to
implement some highly scalable concurrent classes

Atomic classes
support atomic compound actions on a single value in a lock-free manner

Thread Local
Java Thread Local Storage - TLS
It's typically private static fields in classes that wish to associate state with a thread e.g. a current user to transaction
The best way to avoid memory leak is to call remove() method or set(null) on ThreadLocal instance once the job is done

Memory Leak
A memory leak is a type of resource leak that occurs when a computer program incorrectly manages allocations in
such a way that memory which is no longer needed is not released. A memory leak may also happen when an object is stored
in memory but cannot be accessed by the running code. A memory leak has symptoms similar to a number of other problems
and generally can only be diagnosed bt a program's source code
A space leak occurs when a computer program uses more memory than necessary. In contrast to memory leaks, where the
leaked memory is never released, the memory consumed by a space leak is released, but later than expected
Because they can exhaust available system memory as an application runs, memory leaks are often the cause of or a contributing
factor to software aging

garbage collection
Tasks for garbage collection
identify live objects
remove dead objects
optionally, coalesce free space
compaction

mark and sweep, sweep from the stack frame, mark all the objects that are referenced from the stack, or referenced from
the objects that have been marked, then copy all the marked objects to a new memory space, completely delete the old
memory space
fragmentation
JVM is stopping the application from running to execute a gc
when stop-the-world happens, every thread except for the threads needed for the gc will stop their tasks
the interrupted tasks will resume only after the gc tasks has completed

the heap is divided into young generation, old generation and permanent generation. young generation is updated most
frequently, old is less frequent and permanent doesn't update

thread pool
a mechanism to manage threads
Thread per task is the bad way:
-creating a new thread for each request can consume significant computing resources
-having many threads competing for the CPUs can impose other performance costs as well
Reasons for using thread pools:
-gaining some performance when the threads are reused
-better program design, letting you focus on the logic of your program

executors factory methods:
newSingleThreadExecutor
newFixedThreadPool
newCachedThreadPool
newSingleThreadScheduledExecutor
newScheduledThreadPool

Runnable, Callable and Future:
A Callable is like familiar runnable but can return a result and throw an exception
A Future is a marker representing a result that will be available at some point in the future

go concurrency
go is born to be multithreaded
go doesn't need thread pool
