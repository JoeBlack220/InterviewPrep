abstract factory

work around a super-factor which creates other factories
it provides an interface for creating families of related or dependent objects without specifying their concrete classes
it has a level of indirection that abstracts the creation of families of related or dependent objects has the responsibility
for providing creative services for the entire platform family. Clients never create platform objects directly, they ask
the factory to do that for them
this mechanism makes exchanging product families easy because the specific class of the factory object appears only once
in the application-where it is instantiated. e.g.theme change
the application can wholesale replace the entire family of products simply by instantiating a different concrete instance
ot the abstract factory

factory vs abstract factory
both the abstract factory pattern and the factory method pattern decouples the client system from the actual implementation
classes through the abstract types and factories
with the factory pattern, you produce implementations(Apple, Banana, Cherry) of a particular interface (e.g fruit) with
the abstract factory pattern, you produce implementations of a particular factory interface -- say, IFruitFactory. Each
of those knows how to create different kinds of fruits
