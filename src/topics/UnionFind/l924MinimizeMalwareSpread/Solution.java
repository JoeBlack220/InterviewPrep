package topics.UnionFind.l924MinimizeMalwareSpread;
import java.util.Arrays;
public class Solution {
    int[] ids;
    int[] sizes;

    public int minMalwareSpread(int[][] graph, int[] initial) {
        int NUM_SIZE = graph.length;
        ids = new int[NUM_SIZE];
        sizes = new int[NUM_SIZE];

        // 1. Make singleton group
        for (int i = 0; i < NUM_SIZE; i++) {
            makeGroup(i);
        }

        // 2. Union group
        for (int i = 0; i < NUM_SIZE; i++) {
            for (int j = i + 1; j < NUM_SIZE; j++) {
                if (graph[i][j] == 1) {
                    union(i, j);
                }
            }
        }

        // 3. Size of infected initials among each group
        int[] sizeOfInitials = new int[NUM_SIZE];
        for (int i : initial) {
            sizeOfInitials[find(i)]++;
        }

        Arrays.sort(initial);

        // 4. Traverse initial infected nodes
        int maxSize = Integer.MIN_VALUE;
        int ans = initial[0];
        for (int i = initial.length - 1; i >= 0; i--) {
            if (sizeOfInitials[find(initial[i])] == 1) {
                if (sizes[find(initial[i])] >= maxSize) {
                    maxSize = sizes[find(initial[i])];
                    ans = initial[i];
                }
            }
        }
        return ans;
    }

    private void makeGroup(int i) {
        ids[i] = i;
        sizes[i] = 1;
    }

    private void union(int i, int j) {
        int id1 = find(i);
        int id2 = find(j);
        if (id1 != id2) {
            ids[id1] = id2;
            sizes[id2] += sizes[id1];
        }
    }

    private int find(int i) {
        if (ids[i] != i) {
            ids[i] = find(ids[i]);
        }
        return ids[i];
    }
}
